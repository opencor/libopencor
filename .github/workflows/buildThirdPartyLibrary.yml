name: Build third-party library

on:
  workflow_call:
    inputs:
      third_party_library_name:
        required: true
        type: string
      wasm_support:
        required: false
        type: boolean
        default: true

jobs:
  libraries:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Windows release (Intel)'
            os: windows-latest
            target_architecture: Intel
            build_type: Release
          - name: 'Windows debug (Intel)'
            os: windows-latest
            target_architecture: Intel
            build_type: Debug
          - name: 'Windows release (ARM)'
            os: windows-latest
            target_architecture: ARM
            build_type: Release
          - name: 'Windows debug (ARM)'
            os: windows-latest
            target_architecture: ARM
            build_type: Debug
          - name: 'Linux (Intel)'
            os: ubuntu-latest
            target_architecture: Intel
            build_type: Release
          - name: 'Linux (ARM)'
            os: ubuntu-latest
            target_architecture: ARM
            build_type: Release
          - name: 'macOS (Intel)'
            os: macos-latest
            target_architecture: Intel
            build_type: Release
          - name: 'macOS (ARM)'
            os: macos-latest
            target_architecture: ARM
            build_type: Release
    env:
      BUILDCACHE_ACCURACY: STRICT
      BUILDCACHE_COMPRESS_FORMAT: ZSTD
      BUILDCACHE_DEBUG: -1
      BUILDCACHE_LOG_FILE: ""
    steps:
      - name: Check the version of Clang
        run: clang --version
      - name: Check out libOpenCOR
        uses: actions/checkout@v4
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest
      - name: Install buildcache
        uses: cscouto/buildcache-action@v1
        with:
          cache_key: libraries-${{ matrix.os }}-${{ matrix.shared_libs }}
      - name: Configure libOpenCOR
        shell: bash
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DTARGET_ARCHITECTURE=${{ matrix.target_architecture }} -DBUILD_TYPE=${{ matrix.build_type }} -DONLY_BUILD_THIRD_PARTY_LIBRARIES=ON -DPREBUILT_${{ inputs.third_party_library_name }}=OFF ${{ env.DLLVMCLANG_LLVM_TABLEGEN }} ${{ env.DLLVMCLANG_CLANG_TABLEGEN }} ..
      - name: Upload library artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ./build/*.tar.gz
  webassembly:
    name: WebAssembly
    if: ${{ inputs.wasm_support }}
    runs-on: macos-latest
    env:
      BUILDCACHE_ACCURACY: STRICT
      BUILDCACHE_COMPRESS_FORMAT: ZSTD
      BUILDCACHE_DEBUG: -1
      BUILDCACHE_LOG_FILE: ""
    steps:
      - name: Check out libOpenCOR
        uses: actions/checkout@v4
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest
      - name: Install buildcache
        uses: cscouto/buildcache-action@v1
        with:
          cache_key: webassembly
      - name: Install Emscripten
        run: brew install emscripten
      - name: Configure libOpenCOR
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DBUILD_TYPE=Release -DJAVASCRIPT_BINDINGS=ON -DONLY_BUILD_THIRD_PARTY_LIBRARIES=ON -DPREBUILT_${{ inputs.third_party_library_name }}=OFF ..
      - name: Build WebAssembly
        run: |
          cd build
          ninja
      - name: Upload WebAssembly artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v4
        with:
          name: WebAssembly
          path: ./build/*.wasm.tar.gz
