name: Build third-party library

on:
  workflow_call:
    inputs:
      third_party_library_name:
        required: true
        type: string
      wasm_support:
        required: false
        type: boolean
        default: true

jobs:
  libraries:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Windows release'
            os: windows-latest
            build_type: Release
          - name: 'Windows debug'
            os: windows-latest
            build_type: Debug
          - name: 'Linux'
            os: ubuntu-20.04
            # Note: we must use ubuntu-20.04 rather than ubuntu-latest (i.e. ubuntu-22.04 at this stage). Indeed,
            #       Ubuntu 22.04's copy of glibc doesn't include libpthread anymore (see
            #       https://developers.redhat.com/articles/2021/12/17/why-glibc-234-removed-libpthread). Yet, to build
            #       our Python wheels on Linux, we have no choice but to use manylinux_2_28, which relies on a version
            #       of glibc with libpthread, hence getting various messages about __libc_single_threaded being
            #       undefined when trying to build our Python wheels using third-party libraries built on ubuntu-22.04.
            build_type: Release
          - name: 'macOS (Intel)'
            os: macos-13
            build_type: Release
          - name: 'macOS (ARM)'
            os: macos-latest
            build_type: Release
    env:
      BUILDCACHE_ACCURACY: STRICT
      BUILDCACHE_COMPRESS_FORMAT: ZSTD
      BUILDCACHE_DEBUG: -1
      BUILDCACHE_LOG_FILE: ""
    steps:
      - name: Check out libOpenCOR
        uses: actions/checkout@v4
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest
      - name: Install buildcache
        uses: mikehardy/buildcache-action@v2
        with:
          cache_key: libraries-${{ matrix.os }}-${{ matrix.shared_libs }}
      - name: Configure MSVC
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1
      - name: Configure libOpenCOR
        run: |
          mkdir build
          cd build
          ${{ matrix.cmake_prereqs }} cmake -G Ninja -DBUILD_TYPE=${{ matrix.build_type }} -DONLY_BUILD_THIRD_PARTY_LIBRARIES=ON -DPREBUILT_${{ inputs.third_party_library_name }}=OFF ..
      - name: Upload library artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ./build/*.tar.gz
  webassembly:
    name: WebAssembly
    if: ${{ inputs.wasm_support }}
    runs-on: macos-latest
    env:
      BUILDCACHE_ACCURACY: STRICT
      BUILDCACHE_COMPRESS_FORMAT: ZSTD
      BUILDCACHE_DEBUG: -1
      BUILDCACHE_LOG_FILE: ""
    steps:
      - name: Check out libOpenCOR
        uses: actions/checkout@v4
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest
      - name: Install buildcache
        uses: mikehardy/buildcache-action@v2
        with:
          cache_key: webassembly
      - name: Install Emscripten
        run: brew install emscripten
      - name: Configure libOpenCOR
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DBUILD_TYPE=Release -DJAVASCRIPT_BINDINGS=ON -DONLY_BUILD_THIRD_PARTY_LIBRARIES=ON -DPREBUILT_${{ inputs.third_party_library_name }}=OFF ..
      - name: Build WebAssembly
        run: |
          cd build
          ninja
      - name: Upload WebAssembly artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v4
        with:
          name: WebAssembly
          path: ./build/*.wasm.tar.gz
