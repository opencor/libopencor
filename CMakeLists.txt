# Copyright libOpenCOR contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.15)

project(libOpenCOR
        VERSION 0.1.0)

string(TOLOWER "${CMAKE_PROJECT_NAME}" CMAKE_PROJECT_NAME_LC)

# Enable C++17.

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# On macOS, deploy on macOS 10.15 and later.

if(APPLE)
    set(MACOS_DEPLOYMENT_TARGET 10.15)

    if("${CMAKE_OSX_DEPLOYMENT_TARGET}" STREQUAL "")
        set(CMAKE_OSX_DEPLOYMENT_TARGET ${MACOS_DEPLOYMENT_TARGET})
    endif()
endif()

# Some common CMake functions/macros.

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

include(common)

# Check the environment we are dealing with.

include(environmentchecks)

# Initialise/reset our available targets.

set(TARGETS "install" CACHE INTERNAL "Available targets.")

# [CMAKE_]BUILD_TYPE ==> LIBOPENCOR_BUILD_TYPE.

if(NOT IS_MULTI_CONFIG)
    set(LIBOPENCOR_BUILD_TYPE_DOCSTRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...")

    if(DEFINED BUILD_TYPE AND NOT "${BUILD_TYPE}" STREQUAL "")
        set(LIBOPENCOR_BUILD_TYPE "${BUILD_TYPE}" CACHE STRING "${LIBOPENCOR_BUILD_TYPE_DOCSTRING}" FORCE)
    else()
        set(LIBOPENCOR_BUILD_TYPE "Debug" CACHE STRING "${LIBOPENCOR_BUILD_TYPE_DOCSTRING}")
    endif()

    set(CMAKE_BUILD_TYPE "${LIBOPENCOR_BUILD_TYPE}" CACHE INTERNAL "Internalise CMAKE_BUILD_TYPE, manipulate via LIBOPENCOR_BUILD_TYPE." FORCE)
endif()

unset(BUILD_TYPE CACHE)

# CODE_ANALYSIS ==> LIBOPENCOR_CODE_ANALYSIS.

if(CODE_ANALYSIS_AVAILABLE)
    set(LIBOPENCOR_CODE_ANALYSIS_DOCSTRING "Enable code analysis.")
    set(LIBOPENCOR_CODE_ANALYSIS OFF CACHE BOOL "${LIBOPENCOR_CODE_ANALYSIS_DOCSTRING}")
endif()

if(DEFINED CODE_ANALYSIS AND NOT "${CODE_ANALYSIS}" STREQUAL "" AND CODE_ANALYSIS_AVAILABLE)
    set(LIBOPENCOR_CODE_ANALYSIS ${CODE_ANALYSIS} CACHE BOOL "${LIBOPENCOR_CODE_ANALYSIS_DOCSTRING}" FORCE)
elseif(CODE_ANALYSIS)
    message(SEND_ERROR "${CODE_ANALYSIS_ERROR_MESSAGE}")
endif()

unset(CODE_ANALYSIS CACHE)

# CODE_COVERAGE_GCOV ==> LIBOPENCOR_CODE_COVERAGE_GCOV.

if(CODE_COVERAGE_GCOV_AVAILABLE)
    set(LIBOPENCOR_CODE_COVERAGE_GCOV_DOCSTRING "Enable code coverage testing using gcov.")
    set(LIBOPENCOR_CODE_COVERAGE_GCOV OFF CACHE BOOL "${LIBOPENCOR_CODE_COVERAGE_GCOV_DOCSTRING}")
endif()

if(DEFINED CODE_COVERAGE_GCOV AND NOT "${CODE_COVERAGE_GCOV}" STREQUAL "" AND CODE_COVERAGE_GCOV_AVAILABLE)
    set(LIBOPENCOR_CODE_COVERAGE_GCOV ${CODE_COVERAGE_GCOV} CACHE BOOL "${LIBOPENCOR_CODE_COVERAGE_GCOV_DOCSTRING}" FORCE)
elseif(CODE_COVERAGE_GCOV)
    message(SEND_ERROR "${CODE_COVERAGE_GCOV_ERROR_MESSAGE}")
endif()

unset(CODE_COVERAGE_GCOV CACHE)

# CODE_COVERAGE_LLVM_COV ==> LIBOPENCOR_CODE_COVERAGE_LLVM_COV.

if(CODE_COVERAGE_LLVM_COV_AVAILABLE)
    set(LIBOPENCOR_CODE_COVERAGE_LLVM_COV_DOCSTRING "Enable code coverage testing using llvm-cov.")
    set(LIBOPENCOR_CODE_COVERAGE_LLVM_COV OFF CACHE BOOL "${LIBOPENCOR_CODE_COVERAGE_LLVM_COV_DOCSTRING}")
endif()

if(DEFINED CODE_COVERAGE_LLVM_COV AND NOT "${CODE_COVERAGE_LLVM_COV}" STREQUAL "" AND CODE_COVERAGE_LLVM_COV_AVAILABLE)
    set(LIBOPENCOR_CODE_COVERAGE_LLVM_COV ${CODE_COVERAGE_LLVM_COV} CACHE BOOL "${LIBOPENCOR_CODE_COVERAGE_LLVM_COV_DOCSTRING}" FORCE)
elseif(CODE_COVERAGE_LLVM_COV)
    message(SEND_ERROR "${CODE_COVERAGE_LLVM_COV_ERROR_MESSAGE}")
endif()

unset(CODE_COVERAGE_LLVM_COV CACHE)

# COMPILER_CACHING ==> LIBOPENCOR_COMPILER_CACHING.

if(COMPILER_CACHING_AVAILABLE)
    set(LIBOPENCOR_COMPILER_CACHING_DOCSTRING "Enable compiler caching.")
    set(LIBOPENCOR_COMPILER_CACHING ON CACHE BOOL "${LIBOPENCOR_COMPILER_CACHING_DOCSTRING}")
endif()

if(DEFINED COMPILER_CACHING AND NOT "${COMPILER_CACHING}" STREQUAL "" AND COMPILER_CACHING_AVAILABLE)
    set(LIBOPENCOR_COMPILER_CACHING ${COMPILER_CACHING} CACHE BOOL "${LIBOPENCOR_COMPILER_CACHING_DOCSTRING}" FORCE)
elseif(COMPILER_CACHING)
    message(SEND_ERROR "${COMPILER_CACHING_ERROR_MESSAGE}")
endif()

unset(COMPILER_CACHING CACHE)

# DOCUMENTATION ==> LIBOPENCOR_DOCUMENTATION.

if(DOCUMENTATION_AVAILABLE)
    set(LIBOPENCOR_DOCUMENTATION_DOCSTRING "Generate the documentation.")
    set(LIBOPENCOR_DOCUMENTATION ON CACHE BOOL "${LIBOPENCOR_DOCUMENTATION_DOCSTRING}")
endif()

if(DEFINED DOCUMENTATION AND NOT "${DOCUMENTATION}" STREQUAL "" AND DOCUMENTATION_AVAILABLE)
    set(LIBOPENCOR_DOCUMENTATION ${DOCUMENTATION} CACHE BOOL "${LIBOPENCOR_DOCUMENTATION_DOCSTRING}" FORCE)
elseif(DOCUMENTATION)
    message(SEND_ERROR "${DOCUMENTATION_AVAILABLE_ERROR_MESSAGE}")
endif()

unset(DOCUMENTATION CACHE)

# [CMAKE_]INSTALL_PREFIX ==> LIBOPENCOR_INSTALL_PREFIX.

set(LIBOPENCOR_INSTALL_PREFIX_DOCSTRING "Install path prefix, prepended onto install directories.")

if(DEFINED INSTALL_PREFIX AND NOT "${INSTALL_PREFIX}" STREQUAL "")
    set(LIBOPENCOR_INSTALL_PREFIX "${INSTALL_PREFIX}" CACHE PATH "${LIBOPENCOR_INSTALL_PREFIX_DOCSTRING}" FORCE)
else()
    set(LIBOPENCOR_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}" CACHE PATH "${LIBOPENCOR_INSTALL_PREFIX_DOCSTRING}")
endif()

file(TO_CMAKE_PATH "${LIBOPENCOR_INSTALL_PREFIX}" CMAKE_INSTALL_PREFIX_PATH)

set(CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX_PATH}" CACHE INTERNAL "Internalise CMAKE_INSTALL_PREFIX, manipulate via LIBOPENCOR_INSTALL_PREFIX.")

unset(INSTALL_PREFIX CACHE)

# MEMORY_CHECKS ==> LIBOPENCOR_MEMORY_CHECKS.

if(MEMORY_CHECKS_AVAILABLE)
    set(LIBOPENCOR_MEMORY_CHECKS_DOCSTRING "Enable memory checks.")
    set(LIBOPENCOR_MEMORY_CHECKS OFF CACHE BOOL "${LIBOPENCOR_MEMORY_CHECKS_DOCSTRING}")
endif()

if(DEFINED MEMORY_CHECKS AND NOT "${MEMORY_CHECKS}" STREQUAL "" AND MEMORY_CHECKS_AVAILABLE)
    set(LIBOPENCOR_MEMORY_CHECKS ${MEMORY_CHECKS} CACHE BOOL "${LIBOPENCOR_MEMORY_CHECKS_DOCSTRING}" FORCE)
elseif(MEMORY_CHECKS)
    message(SEND_ERROR "${MEMORY_CHECKS_ERROR_MESSAGE}")
endif()

unset(MEMORY_CHECKS CACHE)

# PREBUILT_LIBCELLML ==> LIBOPENCOR_PREBUILT_LIBCELLML.

set(LIBOPENCOR_PREBUILT_LIBCELLML_DOCSTRING "Use the prebuilt version of libCellML.")
set(LIBOPENCOR_PREBUILT_LIBCELLML ON CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBCELLML_DOCSTRING}")

if(DEFINED PREBUILT_LIBCELLML AND NOT "${PREBUILT_LIBCELLML}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_LIBCELLML ${PREBUILT_LIBCELLML} CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBCELLML_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_LIBCELLML CACHE)

# PREBUILT_LIBCOMBINE ==> LIBOPENCOR_PREBUILT_LIBCOMBINE.

set(LIBOPENCOR_PREBUILT_LIBCOMBINE_DOCSTRING "Use the prebuilt version of libCOMBINE.")
set(LIBOPENCOR_PREBUILT_LIBCOMBINE ON CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBCOMBINE_DOCSTRING}")

if(DEFINED PREBUILT_LIBCOMBINE AND NOT "${PREBUILT_LIBCOMBINE}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_LIBCOMBINE ${PREBUILT_LIBCOMBINE} CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBCOMBINE_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_LIBCOMBINE CACHE)

# PREBUILT_LIBCURL ==> LIBOPENCOR_PREBUILT_LIBCURL.

set(LIBOPENCOR_PREBUILT_LIBCURL_DOCSTRING "Use the prebuilt version of libcurl.")
set(LIBOPENCOR_PREBUILT_LIBCURL ON CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBCURL_DOCSTRING}")

if(DEFINED PREBUILT_LIBCURL AND NOT "${PREBUILT_LIBCURL}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_LIBCURL ${PREBUILT_LIBCURL} CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBCURL_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_LIBCURL CACHE)

# PREBUILT_LIBNUML ==> LIBOPENCOR_PREBUILT_LIBNUML.

set(LIBOPENCOR_PREBUILT_LIBNUML_DOCSTRING "Use the prebuilt version of libNuML.")
set(LIBOPENCOR_PREBUILT_LIBNUML ON CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBNUML_DOCSTRING}")

if(DEFINED PREBUILT_LIBNUML AND NOT "${PREBUILT_LIBNUML}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_LIBNUML ${PREBUILT_LIBNUML} CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBNUML_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_LIBNUML CACHE)

# PREBUILT_LIBSBML ==> LIBOPENCOR_PREBUILT_LIBSBML.

set(LIBOPENCOR_PREBUILT_LIBSBML_DOCSTRING "Use the prebuilt version of libSBML.")
set(LIBOPENCOR_PREBUILT_LIBSBML ON CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBSBML_DOCSTRING}")

if(DEFINED PREBUILT_LIBSBML AND NOT "${PREBUILT_LIBSBML}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_LIBSBML ${PREBUILT_LIBSBML} CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBSBML_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_LIBSBML CACHE)

# PREBUILT_LIBSEDML ==> LIBOPENCOR_PREBUILT_LIBSEDML.

set(LIBOPENCOR_PREBUILT_LIBSEDML_DOCSTRING "Use the prebuilt version of libSEDML.")
set(LIBOPENCOR_PREBUILT_LIBSEDML ON CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBSEDML_DOCSTRING}")

if(DEFINED PREBUILT_LIBSEDML AND NOT "${PREBUILT_LIBSEDML}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_LIBSEDML ${PREBUILT_LIBSEDML} CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBSEDML_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_LIBSEDML CACHE)

# PREBUILT_LIBSSH2 ==> LIBOPENCOR_PREBUILT_LIBSSH2.

set(LIBOPENCOR_PREBUILT_LIBSSH2_DOCSTRING "Use the prebuilt version of libssh2.")
set(LIBOPENCOR_PREBUILT_LIBSSH2 ON CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBSSH2_DOCSTRING}")

if(DEFINED PREBUILT_LIBSSH2 AND NOT "${PREBUILT_LIBSSH2}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_LIBSSH2 ${PREBUILT_LIBSSH2} CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBSSH2_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_LIBSSH2 CACHE)

# PREBUILT_LIBXML2 ==> LIBOPENCOR_PREBUILT_LIBXML2.

set(LIBOPENCOR_PREBUILT_LIBXML2_DOCSTRING "Use the prebuilt version of libxml2.")
set(LIBOPENCOR_PREBUILT_LIBXML2 ON CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBXML2_DOCSTRING}")

if(DEFINED PREBUILT_LIBXML2 AND NOT "${PREBUILT_LIBXML2}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_LIBXML2 ${PREBUILT_LIBXML2} CACHE BOOL "${LIBOPENCOR_PREBUILT_LIBXML2_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_LIBXML2 CACHE)

# PREBUILT_LLVMCLANG ==> LIBOPENCOR_PREBUILT_LLVMCLANG.

set(LIBOPENCOR_PREBUILT_LLVMCLANG_DOCSTRING "Use the prebuilt version of LLVM+Clang.")
set(LIBOPENCOR_PREBUILT_LLVMCLANG ON CACHE BOOL "${LIBOPENCOR_PREBUILT_LLVMCLANG_DOCSTRING}")

if(DEFINED PREBUILT_LLVMCLANG AND NOT "${PREBUILT_LLVMCLANG}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_LLVMCLANG ${PREBUILT_LLVMCLANG} CACHE BOOL "${LIBOPENCOR_PREBUILT_LLVMCLANG_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_LLVMCLANG CACHE)

# PREBUILT_OPENSSL ==> LIBOPENCOR_PREBUILT_OPENSSL.

set(LIBOPENCOR_PREBUILT_OPENSSL_DOCSTRING "Use the prebuilt version of OpenSSL.")
set(LIBOPENCOR_PREBUILT_OPENSSL ON CACHE BOOL "${LIBOPENCOR_PREBUILT_OPENSSL_DOCSTRING}")

if(DEFINED PREBUILT_OPENSSL AND NOT "${PREBUILT_OPENSSL}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_OPENSSL ${PREBUILT_OPENSSL} CACHE BOOL "${LIBOPENCOR_PREBUILT_OPENSSL_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_OPENSSL CACHE)

# PREBUILT_SUNDIALS ==> LIBOPENCOR_PREBUILT_SUNDIALS.

set(LIBOPENCOR_PREBUILT_SUNDIALS_DOCSTRING "Use the prebuilt version of SUNDIALS.")
set(LIBOPENCOR_PREBUILT_SUNDIALS ON CACHE BOOL "${LIBOPENCOR_PREBUILT_SUNDIALS_DOCSTRING}")

if(DEFINED PREBUILT_SUNDIALS AND NOT "${PREBUILT_SUNDIALS}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_SUNDIALS ${PREBUILT_SUNDIALS} CACHE BOOL "${LIBOPENCOR_PREBUILT_SUNDIALS_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_SUNDIALS CACHE)

# PREBUILT_ZIPPER ==> LIBOPENCOR_PREBUILT_ZIPPER.

set(LIBOPENCOR_PREBUILT_ZIPPER_DOCSTRING "Use the prebuilt version of zipper.")
set(LIBOPENCOR_PREBUILT_ZIPPER ON CACHE BOOL "${LIBOPENCOR_PREBUILT_ZIPPER_DOCSTRING}")

if(DEFINED PREBUILT_ZIPPER AND NOT "${PREBUILT_ZIPPER}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_ZIPPER ${PREBUILT_ZIPPER} CACHE BOOL "${LIBOPENCOR_PREBUILT_ZIPPER_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_ZIPPER CACHE)

# PREBUILT_ZLIB ==> LIBOPENCOR_PREBUILT_ZLIB.

set(LIBOPENCOR_PREBUILT_ZLIB_DOCSTRING "Use the prebuilt version of zlib.")
set(LIBOPENCOR_PREBUILT_ZLIB ON CACHE BOOL "${LIBOPENCOR_PREBUILT_ZLIB_DOCSTRING}")

if(DEFINED PREBUILT_ZLIB AND NOT "${PREBUILT_ZLIB}" STREQUAL "")
    set(LIBOPENCOR_PREBUILT_ZLIB ${PREBUILT_ZLIB} CACHE BOOL "${LIBOPENCOR_PREBUILT_ZLIB_DOCSTRING}" FORCE)
endif()

unset(PREBUILT_ZLIB CACHE)

# PYTHON_BINDINGS ==> LIBOPENCOR_PYTHON_BINDINGS.

if(PYTHON_BINDINGS_AVAILABLE)
    set(LIBOPENCOR_PYTHON_BINDINGS_DOCSTRING "Buid Python bindings.")
    set(LIBOPENCOR_PYTHON_BINDINGS OFF CACHE BOOL "${LIBOPENCOR_PYTHON_BINDINGS_DOCSTRING}")
endif()

if(DEFINED PYTHON_BINDINGS AND NOT "${PYTHON_BINDINGS}" STREQUAL "" AND PYTHON_BINDINGS_AVAILABLE)
    set(LIBOPENCOR_PYTHON_BINDINGS ${PYTHON_BINDINGS} CACHE BOOL "${LIBOPENCOR_PYTHON_BINDINGS_DOCSTRING}" FORCE)
elseif(PYTHON_BINDINGS)
    message(SEND_ERROR "${PYTHON_BINDINGS_ERROR_MESSAGE}")
endif()

unset(PYTHON_BINDINGS CACHE)

# PYTHON_UNIT_TESTING ==> LIBOPENCOR_PYTHON_UNIT_TESTING.

if(PYTHON_UNIT_TESTING_AVAILABLE)
    set(LIBOPENCOR_PYTHON_UNIT_TESTING_DOCSTRING "Enable Python unit testing.")
    set(LIBOPENCOR_PYTHON_UNIT_TESTING OFF CACHE BOOL "${LIBOPENCOR_PYTHON_UNIT_TESTING_DOCSTRING}")
endif()

if(DEFINED PYTHON_UNIT_TESTING AND NOT "${PYTHON_UNIT_TESTING}" STREQUAL "" AND PYTHON_UNIT_TESTING_AVAILABLE)
    set(LIBOPENCOR_PYTHON_UNIT_TESTING "${PYTHON_UNIT_TESTING}" CACHE BOOL "${LIBOPENCOR_PYTHON_UNIT_TESTING_DOCSTRING}" FORCE)
elseif(PYTHON_UNIT_TESTING)
    message(SEND_ERROR "${PYTHON_UNIT_TESTING_ERROR_MESSAGE}")
endif()

unset(PYTHON_UNIT_TESTING CACHE)

# [BUILD_]SHARED_LIBS ==> LIBOPENCOR_SHARED_LIBS.

set(LIBOPENCOR_SHARED_LIBS_DOCSTRING "Build shared libraries.")

if(DEFINED SHARED_LIBS AND NOT "${SHARED_LIBS}" STREQUAL "")
    set(LIBOPENCOR_SHARED_LIBS ${SHARED_LIBS} CACHE BOOL "${LIBOPENCOR_SHARED_LIBS_DOCSTRING}" FORCE)
else()
    set(LIBOPENCOR_SHARED_LIBS ON CACHE BOOL "${LIBOPENCOR_SHARED_LIBS_DOCSTRING}")
endif()

set(BUILD_SHARED_LIBS ${LIBOPENCOR_SHARED_LIBS} CACHE INTERNAL "Internalise BUILD_SHARED_LIBS, manipulate via LIBOPENCOR_SHARED_LIBS.")

unset(SHARED_LIBS CACHE)

# TARGET_ARCHITECTURE ==> LIBOPENCOR_TARGET_ARCHITECTURE.
# Note: this is only relevant on macOS since on Windows the target architecture is always going to be the same as that
#       of the version of MSVC we are using (i.e. x64 or arm64) while on Linux we have no choice but to target the same
#       architecture as that of the system.

if(APPLE)
    set(LIBOPENCOR_TARGET_ARCHITECTURE_DOCSTRING "Specify the target architecture (Intel or ARM).")
    set(LIBOPENCOR_TARGET_ARCHITECTURE ${DEFAULT_TARGET_ARCHITECTURE} CACHE BOOL "${LIBOPENCOR_TARGET_ARCHITECTURE_DOCSTRING}")

    if(DEFINED TARGET_ARCHITECTURE AND NOT "${TARGET_ARCHITECTURE}" STREQUAL "")
        set(LIBOPENCOR_TARGET_ARCHITECTURE ${TARGET_ARCHITECTURE} CACHE BOOL "${LIBOPENCOR_TARGET_ARCHITECTURE_DOCSTRING}" FORCE)
    endif()

    unset(TARGET_ARCHITECTURE CACHE)
endif()

# UNIT_TESTING ==> LIBOPENCOR_UNIT_TESTING.

set(LIBOPENCOR_UNIT_TESTING_DOCSTRING "Enable unit testing.")
set(LIBOPENCOR_UNIT_TESTING ON CACHE BOOL "${LIBOPENCOR_UNIT_TESTING_DOCSTRING}")

if(DEFINED UNIT_TESTING AND NOT "${UNIT_TESTING}" STREQUAL "")
    set(LIBOPENCOR_UNIT_TESTING ${UNIT_TESTING} CACHE BOOL "${LIBOPENCOR_UNIT_TESTING_DOCSTRING}" FORCE)
endif()

unset(UNIT_TESTING CACHE)

# WARNINGS_AS_ERRORS ==> LIBOPENCOR_WARNINGS_AS_ERRORS.

set(LIBOPENCOR_WARNINGS_AS_ERRORS_DOCSTRING "Treat warnings as errors.")
set(LIBOPENCOR_WARNINGS_AS_ERRORS ON CACHE BOOL "${LIBOPENCOR_WARNINGS_AS_ERRORS_DOCSTRING}")

if(DEFINED WARNINGS_AS_ERRORS AND NOT "${WARNINGS_AS_ERRORS}" STREQUAL "")
    set(LIBOPENCOR_WARNINGS_AS_ERRORS ${WARNINGS_AS_ERRORS} CACHE BOOL "${LIBOPENCOR_WARNINGS_AS_ERRORS_DOCSTRING}" FORCE)
endif()

unset(WARNINGS_AS_ERRORS CACHE)

# Make sure that the configuration is sound.

if(LIBOPENCOR_CODE_COVERAGE_GCOV)
    if(NOT LIBOPENCOR_SHARED_LIBS)
        message(SEND_ERROR "Configuration confusion: code coverage using gcov is requested which means that a static library cannot be requested.")
    endif()

    if(NOT LIBOPENCOR_UNIT_TESTING)
        message(SEND_ERROR "Configuration confusion: code coverage using gcov is requested which means that unit testing should also be requested.")
    endif()
endif()

if(LIBOPENCOR_CODE_COVERAGE_LLVM_COV)
    if(NOT LIBOPENCOR_SHARED_LIBS)
        message(SEND_ERROR "Configuration confusion: code coverage using llvm-cov is requested which means that a static library cannot be requested.")
    endif()

    if(NOT LIBOPENCOR_UNIT_TESTING)
        message(SEND_ERROR "Configuration confusion: code coverage using llvm-cov is requested which means that unit testing should also be requested.")
    endif()
endif()

if(LIBOPENCOR_MEMORY_CHECKS)
    if("${LIBOPENCOR_BUILD_TYPE}" STREQUAL "Release")
        message(SEND_ERROR "Configuration confusion: memory checks are requested which means that a release build cannot also be requested.")
    endif()

    if(NOT LIBOPENCOR_UNIT_TESTING)
        message(SEND_ERROR "Configuration confusion: memory checks are requested which means that unit testing should also be requested.")
    endif()
endif()

if(LIBOPENCOR_PYTHON_BINDINGS)
    if(LIBOPENCOR_SHARED_LIBS)
        message(SEND_ERROR "Configuration confusion: Python bindings are requested which means that a shared library cannot be requested.")
    endif()
endif()

if(LIBOPENCOR_PYTHON_UNIT_TESTING)
    if(NOT LIBOPENCOR_PYTHON_BINDINGS)
        message(SEND_ERROR "Configuration confusion: Python unit testing is requested which means that Python bindings should also be requested.")
    endif()
endif()

if(APPLE)
    if(    NOT "${LIBOPENCOR_TARGET_ARCHITECTURE}" STREQUAL "Intel"
       AND NOT "${LIBOPENCOR_TARGET_ARCHITECTURE}" STREQUAL "ARM")
        message(SEND_ERROR "Configuration error: unsupported target architecture (${LIBOPENCOR_TARGET_ARCHITECTURE}). Supported target architectures are Intel and ARM.")
    endif()
endif()

# Determine whether we are building in release mode.
# Note: this only makes sense if we are not in a multi-configuration mode, i.e. IS_MULTI_CONFIG is equal to FALSE, which
#       is likely to be the case when building a third-party library.

if("${LIBOPENCOR_BUILD_TYPE}" STREQUAL "Debug")
    set(RELEASE_MODE FALSE)
else()
    set(RELEASE_MODE TRUE)
endif()

# Determine whether we are building for an Intel processor.
# Note: it's fine to always set CMAKE_OSX_ARCHITECTURES since it gets ignored on Windows and Linux.

if("${LIBOPENCOR_TARGET_ARCHITECTURE}" STREQUAL "Intel")
    set(INTEL_MODE TRUE)

    set(CMAKE_OSX_ARCHITECTURES x86_64)
else()
    set(INTEL_MODE FALSE)

    set(CMAKE_OSX_ARCHITECTURES arm64)
endif()

# Location of our prebuilt packages.

set(PREBUILT_DIR ${CMAKE_SOURCE_DIR}/prebuilt)

if(WIN32)
    if(RELEASE_MODE)
        set(PREBUILT_DIR ${PREBUILT_DIR}/release)
    else()
        set(PREBUILT_DIR ${PREBUILT_DIR}/debug)
    endif()
endif()

# Enable Python bindings.
# Note: we unset Python_FOUND so that pybind11 can look for Python on our behalf and thus allow our Windows Python CI
#       test to work as expected using GitHub Actions. Indeed, on GHA Windows, Python 3.7.9 is the official version, yet
#       CMake finds and uses Python 3.10.0, which causes problems when we then want to test our Python bindings since we
#       use the official version of Python.

if(LIBOPENCOR_PYTHON_BINDINGS)
    unset(Python_FOUND)

    add_subdirectory(extern/pybind11)

    mark_as_advanced(PYBIND11_FINDPYTHON
                     PYBIND11_INSTALL
                     PYBIND11_INTERNALS_VERSION
                     PYBIND11_NOPYTHON
                     PYBIND11_TEST)
endif()

# Build libOpenCOR.

add_subdirectory(src)

# Enable unit testing.

if(LIBOPENCOR_UNIT_TESTING)
    enable_testing()

    set(BUILD_GMOCK OFF CACHE BOOL "" FORCE)
    set(INSTALL_GTEST OFF CACHE BOOL "" FORCE)

    add_subdirectory(extern/googletest)

    mark_as_advanced(BUILD_GMOCK
                     INSTALL_GTEST)
endif()

# Run our tests.

add_subdirectory(tests)

# Generate our documentation.

add_subdirectory(doc)

# Check our code formatting and format our code.

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/cmake/formatting)

# Package libOpenCOR.

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/cmake/packaging)

# Summary of our configuration.

message(STATUS "Configuration summary:")

if(DEFINED LIBOPENCOR_BUILD_TYPE)
    message(STATUS " - LIBOPENCOR_BUILD_TYPE:              ${LIBOPENCOR_BUILD_TYPE}")
endif()

if(DEFINED LIBOPENCOR_CODE_ANALYSIS)
    message(STATUS " - LIBOPENCOR_CODE_ANALYSIS:           ${LIBOPENCOR_CODE_ANALYSIS}")
endif()

if(DEFINED LIBOPENCOR_CODE_COVERAGE_GCOV)
    message(STATUS " - LIBOPENCOR_CODE_COVERAGE_GCOV:      ${LIBOPENCOR_CODE_COVERAGE_GCOV}")
endif()

if(DEFINED LIBOPENCOR_CODE_COVERAGE_LLVM_COV)
    message(STATUS " - LIBOPENCOR_CODE_COVERAGE_LLVM_COV:  ${LIBOPENCOR_CODE_COVERAGE_LLVM_COV}")
endif()

if(DEFINED LIBOPENCOR_COMPILER_CACHING)
    message(STATUS " - LIBOPENCOR_COMPILER_CACHING:        ${LIBOPENCOR_COMPILER_CACHING}")
endif()

if(DEFINED LIBOPENCOR_DOCUMENTATION)
    message(STATUS " - LIBOPENCOR_DOCUMENTATION:           ${LIBOPENCOR_DOCUMENTATION}")
endif()

message(STATUS " - LIBOPENCOR_INSTALL_PREFIX:          ${LIBOPENCOR_INSTALL_PREFIX}")

if(DEFINED LIBOPENCOR_MEMORY_CHECKS)
    message(STATUS " - LIBOPENCOR_MEMORY_CHECKS:           ${LIBOPENCOR_MEMORY_CHECKS}")
endif()

message(STATUS " - LIBOPENCOR_PREBUILT_LIBCELLML:      ${LIBOPENCOR_PREBUILT_LIBCELLML}")
message(STATUS " - LIBOPENCOR_PREBUILT_LIBCOMBINE:     ${LIBOPENCOR_PREBUILT_LIBCOMBINE}")
message(STATUS " - LIBOPENCOR_PREBUILT_LIBCURL:        ${LIBOPENCOR_PREBUILT_LIBCURL}")
message(STATUS " - LIBOPENCOR_PREBUILT_LIBNUML:        ${LIBOPENCOR_PREBUILT_LIBNUML}")
message(STATUS " - LIBOPENCOR_PREBUILT_LIBSBML:        ${LIBOPENCOR_PREBUILT_LIBSBML}")
message(STATUS " - LIBOPENCOR_PREBUILT_LIBSEDML:       ${LIBOPENCOR_PREBUILT_LIBSEDML}")
message(STATUS " - LIBOPENCOR_PREBUILT_LIBSSH2:        ${LIBOPENCOR_PREBUILT_LIBSSH2}")
message(STATUS " - LIBOPENCOR_PREBUILT_LIBXML2:        ${LIBOPENCOR_PREBUILT_LIBXML2}")
message(STATUS " - LIBOPENCOR_PREBUILT_LLVMCLANG:      ${LIBOPENCOR_PREBUILT_LLVMCLANG}")
message(STATUS " - LIBOPENCOR_PREBUILT_OPENSSL:        ${LIBOPENCOR_PREBUILT_OPENSSL}")
message(STATUS " - LIBOPENCOR_PREBUILT_SUNDIALS:       ${LIBOPENCOR_PREBUILT_SUNDIALS}")
message(STATUS " - LIBOPENCOR_PREBUILT_ZIPPER:         ${LIBOPENCOR_PREBUILT_ZIPPER}")
message(STATUS " - LIBOPENCOR_PREBUILT_ZLIB:           ${LIBOPENCOR_PREBUILT_ZLIB}")

if(DEFINED LIBOPENCOR_PYTHON_BINDINGS)
    message(STATUS " - LIBOPENCOR_PYTHON_BINDINGS:         ${LIBOPENCOR_PYTHON_BINDINGS}")
endif()

if(DEFINED LIBOPENCOR_PYTHON_UNIT_TESTING)
    message(STATUS " - LIBOPENCOR_PYTHON_UNIT_TESTING:     ${LIBOPENCOR_PYTHON_UNIT_TESTING}")
endif()

message(STATUS " - LIBOPENCOR_SHARED_LIBS:             ${LIBOPENCOR_SHARED_LIBS}")
message(STATUS " - LIBOPENCOR_TARGET_ARCHITECTURE:     ${LIBOPENCOR_TARGET_ARCHITECTURE}")
message(STATUS " - LIBOPENCOR_UNIT_TESTING:            ${LIBOPENCOR_UNIT_TESTING}")
message(STATUS " - LIBOPENCOR_WARNINGS_AS_ERRORS:      ${LIBOPENCOR_WARNINGS_AS_ERRORS}")

# Summary of available targets.

message(STATUS "Useful targets:")

foreach(TARGET ${TARGETS})
    message(STATUS " - ${TARGET}")
endforeach()
